<?xml version="1.0"?>
<launch>

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find exprob_assignment2)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default, we won't load or override the robot_description -->
  <arg name="load_robot_description" default="false"/>

  <!--
  By default, hide joint_state_publisher's GUI

  MoveIt's "demo" mode replaces the real robot driver with the joint_state_publisher.
  The latter one maintains and publishes the current joint configuration of the simulated robot.
  It also provides a GUI to move the simulated robot around "manually".
  This corresponds to moving around the real robot without the use of MoveIt.
  -->
  <arg name="use_gui" default="false" />

  <!-- Gazebo specific options -->
  <arg name="gazebo_gui" default="true"/>
  <arg name="paused" default="false"/>
  <!-- By default, use the urdf location provided from the package -->
  <arg name="urdf_path" default="/root/ros_ws/src/Robot.urdf"/>

  <!-- launch the gazebo simulator and spawn the robot -->
  <!-- startup simulated world -->
  <include file="$(find exprob_assignment2)/launch/assignment.launch"></include>

  <!-- send robot urdf to param server -->
  <param name="robot_description" textfile="$(arg urdf_path)" />

  <!-- push robot_description to factory and spawn robot in gazebo at the origin, change x,y,z arguments to spawn in a different position -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot -x 0 -y 0 -z 0"
    respawn="false" output="screen" />

  <include file="$(find exprob_assignment2)/launch/ros_controllers.launch"/>

  <!-- If needed, broadcast static tf for robot root -->
  

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    <rosparam param="source_list">[/joint_states]</rosparam>
  </node>
  <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    <rosparam param="source_list">[/joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find exprob_assignment2)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <!--<include file="$(find moveit_ass2_pkg)/launch/moveit_rviz.launch">
    <arg name="rviz_config" value="$(find moveit_ass2_pkg)/launch/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>-->

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find exprob_assignment2)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>
  
  <!--<node name="goToPoint" pkg="exprob_assignment2" type ="go_to_point.py" />-->

<!-- launch the pddl part-->
<!-- arguments -->
<arg name="domain_path" default="$(find rosplan_demos)/common/domain_prova.pddl" />
<arg name="problem_path" default="$(find rosplan_demos)/common/problem_prova.pddl" />
<arg name="autom_gen_problem_path" default="$(find rosplan_demos)/common/new_problem.pddl" />
<arg name="use_problem_topic" default="true" />
<!-- planner will produce output plan and write to this location -->
<arg name="data_path" default="$(find rosplan_demos)/common/" />  
  <!-- command to run the planner -->
  <arg name="planner_command" default="timeout 10 $(find rosplan_planning_system)/common/bin/popf DOMAIN PROBLEM" />
    <!-- interface to the planning system -->
  <arg name="planner_interface" default="popf_planner_interface" />

  <!-- knowledge base -->
  <node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false" output="screen">
    <param name="domain_path" value="$(arg domain_path)" />
    <param name="problem_path" value="$(arg problem_path)" />
    <!-- conditional planning flags -->
    <param name="use_unknowns" value="false" />
  </node>


  <!-- problem generation -->
  <include file="$(find rosplan_planning_system)/launch/includes/problem_interface.launch">
    <arg name="knowledge_base"   value="rosplan_knowledge_base" />
    <arg name="domain_path"      value="$(arg domain_path)" />
    <!-- problem_path: pddl problem will be automatically generated and placed in this location -->
    <arg name="problem_path"     value="$(arg autom_gen_problem_path)" />
    <arg name="problem_topic"    value="problem_instance" />
  </include>
  
  
  <!-- planner interface -->
  <include file="$(find rosplan_planning_system)/launch/includes/planner_interface.launch">
    <arg name="use_problem_topic"    value="$(arg use_problem_topic)" />
    <arg name="problem_topic"        value="/rosplan_problem_interface/problem_instance" />
    <arg name="planner_topic"        value="planner_output" />
    <arg name="domain_path"          value="$(arg domain_path)" />
    <arg name="data_path"            value="$(arg data_path)" />
    <arg name="planner_command"      value="$(arg planner_command)" />
    <arg name="planner_interface"    value="$(arg planner_interface)" />
  </include>
  
  <!-- parser-->
  <node name="rosplan_parsing_interface" pkg="rosplan_planning_system" type="pddl_simple_plan_parser" respawn="false" 
output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="planner_topic" value="/rosplan_planner_interface/planner_output" />
<param name="plan_topic" value="complete_plan" />
</node>
<!-- dispatcher-->
<node name="rosplan_plan_dispatcher" pkg="rosplan_planning_system" type="pddl_simple_plan_dispatcher" respawn="false" 
output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="plan_topic" value="/rosplan_parsing_interface/complete_plan" />
<param name="action_dispatch_topic" value="action_dispatch" />
<param name="action_feedback_topic" value="action_feedback" />
</node>
<!-- simulated actions-->
<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
<arg name="pddl_action_name" value="goto_waypoint" />
</include>
<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
<arg name="pddl_action_name" value="take_hint" />
</include>
<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
<arg name="pddl_action_name" value="go_home" />
</include>
<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
<arg name="pddl_action_name" value="move_from_home" />
</include>
<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
<arg name="pddl_action_name" value="check_complete" />
<arg name="action_probability" value="0.7"/>
</include>
<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
<arg name="pddl_action_name" value="check_hypothesis" />
<arg name="action_probability" value="0.7"/>
</include>

</launch>
